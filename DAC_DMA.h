#ifndef DAC_DMA_H
#define DAC_DMA_H

#include "mbed.h"

#define PERPH_BURST_SIZE 4
#define PERPH_DATA_SIZE  4
#define DMA_TRANSFER_SIZE (100 * PERPH_BURST_SIZE * PERPH_DATA_SIZE)

// Note:
// DAC DMA requests generated by timer 6.

static volatile uint16_t dma_transfer_buffer[DMA_TRANSFER_SIZE];

DAC_HandleTypeDef    DacHandle;
static DAC_ChannelConfTypeDef sConfigDac;

extern Serial pc;
const uint8_t aEscalator8bit[6] = {0x0, 0x33, 0x66, 0x99, 0xCC, 0xFF};
static void DAC_Config(void)
{
   
    
    DacHandle.Instance = DAC1;

     HAL_DAC_DeInit(&DacHandle);

    if(HAL_DAC_Init(&DacHandle) != HAL_OK)
    {
    
            led2 =1;
            pc.printf("/* Initialization Error */ \n\r");
            wait(1);
            while(1){};
    }  

    // DAC_TRIGGER_SOFTWARE an option
    sConfigDac.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
    sConfigDac.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE; 

    if(HAL_DAC_ConfigChannel(&DacHandle, &sConfigDac, DAC_CHANNEL_1) != HAL_OK)
    {
    /* Channel configuration Error */
        Error_Handler();
    }  

      /*##-2- Enable DAC Channel1 and associated DMA #############################*/
  if(HAL_DAC_Start_DMA(&DacHandle, DAC_CHANNEL_1, (uint32_t*)aEscalator8bit, 6, DAC_ALIGN_8B_R) != HAL_OK)
  {
    /* Start DMA Error */
    Error_Handler();
  }

//   AdcHandle.Instance          = ADCx;
  
//   AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
//   AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;
//   AdcHandle.Init.ScanConvMode          = DISABLE;                       /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
//   AdcHandle.Init.ContinuousConvMode    = ENABLE;                       /* Continuous mode enabled to have continuous conversion  */
//   AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
//   AdcHandle.Init.NbrOfDiscConversion   = 0;
//   AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        /* Conversion start trigged at each external event */
//   AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
//   AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
//   AdcHandle.Init.NbrOfConversion       = 1;
//   AdcHandle.Init.DMAContinuousRequests = ENABLE;
//   AdcHandle.Init.EOCSelection          = DISABLE;

}

#endif

